source("http://bioconductor.org/biocLite.R")
library(pasillaBamSubset)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
grl <- exonsBy(txdb, by="gene")
grl[100]
grl[[100]]
grl[[100]][1]
fl1 <- untreated1_chr4()
fl2 <- untreated3_chr4()
fl1
library(Rsamtools)
library(GenomicRanges)
library(GenomicAlignments)
fls <- BamFileList(c(fl1, fl2))
names(fls) <- c("first","second")
so1 <- summarizeOverlaps(features=grl,
reads=fls,
ignore.strand=TRUE)
so1
head(assay(so1))
colSums(assay(so1))
rowData(so1)
colData(so1)
colData(so1)$sample <- c("one","two")
colData(so1)
metadata(rowData(so1))
x <- assay(so1)[,1]
hist(x[x > 0], col="grey")
hist(x[x > 0 & x < 10000], col="grey")
plot(assay(so1) + 1, log="xy")
fls <- BamFileList(fl2)
so2 <- summarizeOverlaps(features=grl,
reads=fls,
ignore.strand=TRUE,
singleEnd=FALSE,
fragments=TRUE)
colSums(assay(so2))
colSums(assay(so1))
plot(assay(so1)[,2], assay(so2)[,1], xlim=c(0,5000), ylim=c(0,5000),
xlab="single end counting", ylab="paired end counting")
abline(0,1)
abline(0,.5)
?GenTable
library(topGO)
?GenTable
?scan
l3 <- c()
l2 <- c(name='toto',1:5)
l2
l3 <- apppend(l3, l2)
l3 <- append(l3, l2)
l3
l1 <- c(name='titi',1:5)
l1
l3 <- apppend(l3, l1)
l3 <- append(l3, l1)
l3
l3 <- c()
l1 <- c(1:5)
l3 <- append(l3,setNames(l1))
?setNames
setName('tt',l1)
setNames('tt',l1)
setNames(l1,"toto")
l3
l1
l2
l2 <- c(5:10)
l2
setNames(l3[1],'test')
l3[1]
l3[[1]]
l3
l3 <- append(l1)
l3 <- append(l3,l1)
l3[[1]]
l3[1]
l3
l3 <- append(l3,l2)
l3
l3 <- c()
l3 <- List()
l3 <- list()
l3
l1 <- list(1:4)
l1
l2 <- list(5:10)
l3 <- append(l3,l1)
l3 <- append(l3,l2)
l3
setNames(l1,'toto')
l3
l3 <- list()
l3 <- append(l3,setName(l1,'toto'))
l3 <- append(l3,setNames(l1,'toto'))
l3
l3 <- append(l3,setNames(l2,'titi'))
l3
geneList <- factor(as.integer (all_genes %in% interesting_genes))
all_genes <- scan(file="subset.txt", what=R.character())
setwd("/work/bio-informatics/pyhton-r")
all_genes <- scan(file="subset.txt", what=R.character())
all_genes <- scan(file="subset.txt", what=character())
all_genes
geneList <- factor(as.integer (all_genes %in% all_genes))
geneList
geneList <- setNames(geneList, all_genes)
geneList
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
map
names(map) <- a[, 3]
map
map[[1]]
map[1]
map[2]
map[3]
Names(map)
?getNames
getNames(map)
colnames(map)
rownames(map)
map
typeof(map)
row.name(map)
row.names(map)
col.names(map)
map[1]
col.names(map)
geneList <- factor(as.integer (all_genes %in% all_genes))
geneList
all_genes <- scan(file="subset.txt", what=character())
all_genes
subset <- all_genes[1:5]
subset
geneList <- factor(as.integer (all_genes %in% subset))
geneList
geneList <- setNames(geneList, all_genes)
geneList
geneList
geneList[1]
geneList[2]
genes2go = ReadMappings(gene_anno_custom)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go = ReadMappings(gene_anno_custom)
genes2go = readMappings(gene_anno_custom)
genes2go = readMappings("gene_anno_custom")
genes2go
testset = scan(file='subset.txt', what=character())
testset = sample(testset, length(testset)/10)
testset
testset = sample(testset, length(testset)/20)
testset = sample(testset, length(testset)/80)
testset
testset = scan(file='subset.txt', what=character())
testset = sample(testset, length(testset)/80)
testset
testset = scan(file='subset.txt', what=character())
testset = sample(testset, length(testset)/0.8)
testset = scan(file='subset.txt', what=character())
testset = sample(testset, length(testset)/2)
testset
refset = names(genes2go)
genes_of_interest = factor(as.integer(refset %in% testset))
genes_of_interest = setNames(genes_of_interest, refset)
GOdata = R.new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go <- readMappings("gene_anno_custom")
testset <- scan(file='subset.txt', what=character())
testset <- sample(testset, length(testset)/2)
refset <- names(genes2go)
genes_of_interest <- factor(as.integer(refset %in% testset))
genes_of_interest <- setNames(genes_of_interest, refset)
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go = readMappings("gene_anno_custom")
refset = names(genes2go)
testset = scan(file='subset.txt', what=character())
genes_of_interest = factor(as.integer(refset %in% testset))
names(genes_of_interest) <- refset
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go <- readMappings("gene_anno_custom")
testset <- scan(file='subset.txt', what=character())
testset <- sample(testset, length(testset)/2)
refset <- names(genes2go)
genes_of_interest <- factor(as.integer(refset %in% testset))
genes_of_interest <- setNames(genes_of_interest, refset)
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go = readMappings("gene_anno_custom")
refset = names(genes2go)
testset = scan(file='subset.txt', what=character())
testset = sample(testset, length(testset)/2)
genes_of_interest = factor(as.integer(refset %in% testset))
names(genes_of_interest) <- refset
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go = readMappings("gene_anno_custom")
refset = names(genes2go)
#testset = scan(file='subset.txt', what=character())
testset = sample(refset, length(refset)/2)
genes_of_interest = factor(as.integer(refset %in% testset))
names(genes_of_interest) <- refset
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go = readMappings("gene_anno_custom")
refset = names(genes2go)
#testset = scan(file='subset.txt', what=character())
testset = sample(refset, length(refset)/3)
genes_of_interest = factor(as.integer(refset %in% testset))
names(genes_of_interest) <- refset
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
str(head(geneID2GO))
geneNames <- names(geneID2GO)
myInterestingGenes <- sample(geneNames, length(geneNames) / 10)
geneList <- factor(as.integer(geneNames %in% myInterestingGenes))
geneList
genes_of_interest
names(geneList) <- geneNames
geneList
GOdata <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO)
geneID2GO = readMappings("gene_anno_custom")
geneNames = names(geneID2GO)
myInterestingGenes = sample(geneNames, length(geneNames)/4)
geneList = factor(as.integer(geneNames %in% myInterestingGenes))
names(geneList) <- geneNames
GOdata = new("topGOdata",
ontology="MF",
allGenes=geneList,
annot=annFUN.gene2GO,
gene2GO=geneID2GO)
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
geneNames <- names(geneID2GO)
myInterestingGenes <- sample(geneNames, length(geneNames) / 80)
geneList <- factor(as.integer(geneNames %in% myInterestingGenes))
names(geneList) <- geneNames
GOdata <- new("topGOdata", ontology = "MF", allGenes = geneList,
annot = annFUN.gene2GO, gene2GO = geneID2GO)
str(head(GO2geneID))
str(head(GO2geneID))
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
str(head(GO2geneID))
str(head(geneID2GO))
geneID2GO = readMappings("gene_anno_custom")
str(head(geneID2GO))
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "MF",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 1,
annot = annFUN.gene2GO,
gene2GO = map
)
geneNames <- scan(file='subset.txt', what=character())
geneList <- factor(as.integer(geneNames %in% geneNames))
myInterestingGenes = sample(geneNames, length(geneNames)/2)
geneList <- factor(as.integer(geneNames %in% myInterestingGenes))
GOdataBP <- new("topGOdata",
ontology = "MF",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
names(geneList) <- geneNames
GOdataBP <- new("topGOdata",
ontology = "MF",
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
str(head(map))
a[,3]
a[,5]
geneID2GO = readMappings("gene_anno_custom")
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
genes2go <- readMappings("gene_anno_custom")
testset <- scan(file='subset.txt', what=character())
testset <- sample(testset, length(testset)/2)
refset <- names(genes2go)
genes_of_interest <- factor(as.integer(refset %in% testset))
genes_of_interest <- setNames(genes_of_interest, refset)
GOdata = new("topGOdata",
ontology="MF",
annot=annFUN.gene2GO,
allGenes=genes_of_interest,
gene2GO=genes2go
)
str(head(geneID2GO))
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
str(head(geneID2GO))
str(head(genes2go))
