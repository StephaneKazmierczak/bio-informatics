y <- rnorm(10)
x <- 1:10
plot(x,y)
fit <- lm(y -x )
fit <- lm(y ~ x)
bioclite(c("genefilter","geneplotter"))
biocLite(c("genefilter","geneplotter"))
#biocLite(c("genefilter","geneplotter"))
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("genefilter","geneplotter"))
?mean
example(boxplot)
library(matrixStats) ##need rowMedians
library(RColorBrewer)
for(i in c(1,4)){
r=log2(int[,i])-rowMedians(log2(int))
## r are residuals from median array
## to avoind outliers taking over colors of image
### define a MAX
MAX<-1
r[r>MAX]<-MAX
r[r< -MAX] <- -MAX
##we now that every other column is skipped
mat=matrix(NA,max(locations[,1]),max(locations[,2]+1)/2)
for(j in 1:nrow(locations)){
mat[locations[j,1],(locations[j,2]+1)/2]<-r[j]
}
image(mat,col=brewer.pal(11,"RdBu"))
}
```
On the second image we can clearly see the spatial pattern (blue are positive residuals, red are negative)
for(i in c(1,4)){
r=log2(int[,i])-rowMedians(log2(int))
## r are residuals from median array
## to avoind outliers taking over colors of image
### define a MAX
MAX<-1
r[r>MAX]<-MAX
r[r< -MAX] <- -MAX
##we now that every other column is skipped
mat=matrix(NA,max(locations[,1]),max(locations[,2]+1)/2)
for(j in 1:nrow(locations)){
mat[locations[j,1],(locations[j,2]+1)/2]<-r[j]
}
image(mat,col=brewer.pal(11,"RdBu"))
}
library("knitr")
library(topGo)
library(topGO)
library(ALL)
data(ALL)
data(geneList)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
affyLib <- paste(annotation(ALL), "db", sep = ".")
data(ALL)
library(ALL)
data(ALL)
library(topGO)
library(ALL)
data(ALL)
data(geneList)
sum(topDiffGenes(geneList))
sum(topDiffGenes(geneList))
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher <- runTest(sampleGOdata, algorithm = "classic", statistic = "fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(sampleGOdata, algorithm = "elim", statistic = "ks")
allRes <- GeneTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
pValue.classic <- score(resultKS)
pValue.classic <- score(resultKS)
pValue.elim <- score(resultKS.elim)[names(pValue.classic)]
gstat <- termStat(sampleGOdata, names(pValue.classic))
gSize <- gstat$Annotated / max(gstat$Annotated) * 4
gCol <- colMap(gstat$Significant)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
+ pch = 19, cex = gSize, col = gCol)
library(topGO)
gCol <- colMap(gstat$Significant)
colMap <- function(x) {
.col <- rep(rev(heat.colors(length(unique(x)))), time = table(x))
return(.col[match(1:length(x), order(x))])
}
gCol <- colMap(gstat$Significant)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
+ pch = 19, cex = gSize, col = gCol)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
pch = 19, cex = gSize, col = gCol)
browseVignettes(package = "topGO")
sel.go <- names(pValue.classic)[pValue.elim < pValue.classic]
cbind(termStat(sampleGOdata, sel.go),
elim = pValue.elim[sel.go],
classic = pValue.classic[sel.go])
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = ✬all✬)
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = 'all')
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = 'all')
library(topGO)
library(ALL)
data(ALL)
data(geneList)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher <- runTest(sampleGOdata, algorithm = "classic", statistic = "fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(sampleGOdata, algorithm = "elim", statistic = "ks")
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher <- runTest(sampleGOdata, algorithm = "classic", statistic = "fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(sampleGOdata, algorithm = "elim", statistic = "ks")
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
vignette(topGO)
vignette(topGO)
vignette("topGO")
vignette(package = "topGO")
vignette(package = "topGO")
vignette("topGO")
browseVignettes(topGO)
browseVignettes("topGO")
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, elimKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, elimKS = resultKS.elim,
orderBy = "elimKS", ranksOf = "classicFisher", topNodes = 10)
setwd("/work/bio-informatics/pyhton-r")
?factor
factor(1:3)
factor(1:4)
1:4
A:C
A:B
A:D
letters[1:5]
factor(letters[1:5])
?GenTable
