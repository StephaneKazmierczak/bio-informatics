library(topGO)
library(ALL)
data(ALL)
data(geneList)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
affyLib <- paste(annotation(ALL), "db", sep = ".")
data(ALL)
library(ALL)
data(ALL)
library(topGO)
library(ALL)
data(ALL)
data(geneList)
sum(topDiffGenes(geneList))
sum(topDiffGenes(geneList))
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sum(topDiffGenes(geneList))
sampleGOdata <- new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes,
nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher <- runTest(sampleGOdata, algorithm = "classic", statistic = "fisher")
resultFisher
resultKS <- runTest(sampleGOdata, algorithm = "classic", statistic = "ks")
resultKS.elim <- runTest(sampleGOdata, algorithm = "elim", statistic = "ks")
allRes <- GeneTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
allRes <- GenTable(sampleGOdata, classicFisher = resultFisher,
classicKS = resultKS, emilKS = resultKS.elim,
orderBy = "elimKS", ranksof = "classicFisher", topNodes = 10)
pValue.classic <- score(resultKS)
pValue.classic <- score(resultKS)
pValue.elim <- score(resultKS.elim)[names(pValue.classic)]
gstat <- termStat(sampleGOdata, names(pValue.classic))
gSize <- gstat$Annotated / max(gstat$Annotated) * 4
gCol <- colMap(gstat$Significant)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
+ pch = 19, cex = gSize, col = gCol)
library(topGO)
gCol <- colMap(gstat$Significant)
colMap <- function(x) {
.col <- rep(rev(heat.colors(length(unique(x)))), time = table(x))
return(.col[match(1:length(x), order(x))])
}
gCol <- colMap(gstat$Significant)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
+ pch = 19, cex = gSize, col = gCol)
plot(pValue.classic, pValue.elim, xlab = "p-value classic", ylab = "p-value elim",
pch = 19, cex = gSize, col = gCol)
browseVignettes(package = "topGO")
sel.go <- names(pValue.classic)[pValue.elim < pValue.classic]
cbind(termStat(sampleGOdata, sel.go),
elim = pValue.elim[sel.go],
classic = pValue.classic[sel.go])
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = ✬all✬)
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = 'all')
showSigOfNodes(sampleGOdata, score(resultKS.elim), firstSigNodes = 5, useInfo = 'all')
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file, header = FALSE, quote = "",
sep = sep, colClasses = "character")
map <- a[, 5]
names(map) <- a[, 2]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.ID
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
sampleGOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(sampleGOdataBP, algorithm = "classic", statistic = "fisher")
library(topGO)
#library(qvalue)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file, header = FALSE, quote = "",
sep = sep, colClasses = "character")
map <- a[, 5]
names(map) <- a[, 2]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.ID
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
sampleGOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(sampleGOdataBP, algorithm = "classic", statistic = "fisher")
"""
s <- score(resultFisherBP)
pval <- c()
for (i in 1:length(s)){
pval[i] <- s[i][1]
}
p.adjust(pval, method='fdr')
"""
allRes <- GenTable(GOdata,
classic = resultFisher,
orderBy = "classic",
ranksOf = "classic",
topNodes = 10)
View(a)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file, header = FALSE, quote = "",
sep = sep, colClasses = "character")
map <- a[, 5]
names(map) <- a[, 2]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.ID
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
sampleGOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(sampleGOdataBP, algorithm = "classic", statistic = "fisher")
allRes <- GenTable(GOdata,
classic = resultFisher,
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 2]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.ID
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
allRes <- GenTable(GOdataBP,
classic = resultFisher,
orderBy = "classic",
ranksOf = "classic",
topNodes = 10)
allRes <- GenTable(GOdataBP,
classic = resultFisherBP,
orderBy = "classic",
ranksOf = "classic",
topNodes = 10)
allRes
topDiffGenes(geneList)
my.data$pvalue
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map
View(a)
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.ID
names(geneList) <- my.data$DB.Object.Symbol
geneList
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
allRes <- GenTable(GOdataBP,
classic = resultFisherBP,
orderBy = "classic",
ranksOf = "classic",
topNodes = 10)
View(allRes)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 5,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
topDiffGenes(geneList)
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 5,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
"""
allRes <- GenTable(GOdataBP,
classic = resultFisherBP,
orderBy = "classic",
ranksOf = "classicFisher",
topNodes = 10)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 5,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 1,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 2,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
allRes <- GenTable(GOdataBP,
classic = resultFisherBP,
orderBy = "classic",
ranksOf = "classicFisher",
topNodes = 10)
library(topGO)
setwd("/work/bio-informatics/pyhton-r")
file <- 'gene_association.goa_human_noHeader'
sep <- "\t"
IDsep <- ","
a <- read.delim(file = file,
header = FALSE,
quote = "",
sep = sep,
colClasses = "character")
map <- a[, 5]
names(map) <- a[, 3]
map <- lapply(map, function(x) gsub(" ", "", strsplit(x, split = IDsep)[[1]]))
my.data <- read.csv('gene_data_hs.csv')
geneList <- my.data$pvalue
names(geneList) <- my.data$DB.Object.Symbol
topDiffGenes = function(allScore) {
return (allScore < 0.01)
}
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 10,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "BP",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 1,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
allRes <- GenTable(GOdataBP,
classic = resultFisherBP,
orderBy = "classic",
ranksOf = "classicFisher",
topNodes = 10)
View(allRes)
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "MF",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 1,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
GOdataBP <- new("topGOdata",
description = "Simple session",
ontology = "CC",
geneSelectionFun = topDiffGenes,
allGenes = geneList,
nodeSize = 1,
annot = annFUN.gene2GO,
gene2GO = map
)
resultFisherBP <- runTest(GOdataBP,
algorithm = "classic",
statistic = "fisher")
